"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
print('Base_DIR Path:', BASE_DIR)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_PRODUCTION_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
#DEBUG = False

# '*' is a google app engine specific setting to protect against header attacks. normally you would define exact host address app.example.com
if DEBUG == True:
    ALLOWED_HOSTS = []
else:
    ALLOWED_HOSTS = ['bdcompanytest.ignorelist.com','localhost','.localhost']
    #ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'users.apps.UsersConfig',
    'blog.apps.BlogConfig',
    'qr_code',
    'crispy_forms',
    'stripe',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'test',
        'USER':'postgres',
        'PASSWORD':'test123',
        'HOST':'localhost',
        'PORT':'5432',
    },
    'customer_data': {
        'ENGINE': 'django.db.backends.mysql',
        'HOST': '34.142.63.13',
        'USER': 'henry_test_connection',
        'PASSWORD': 'test1234',
        'NAME': 'beandrop_google_db',
        'PORT':'3306',
        'OPTIONS': {
            'ssl': {'ca':os.environ.get('BD_SERVER_CA'),
            'cert':os.environ.get('BD_CLIENT_CERT'),
            'key':os.environ.get('BD_CLIENT_KEY'),
            #'ssl': {'ca':'/var/www/mydomain/server_ca.pem',
            #'cert':'/var/www/mydomain/client_cert.pem',
            #'key':'/var/www/mydomain/client_key.pem',
            #'verify-server-cert': 'yes',
            }
        }
    }
}


# Redundant Database setup when deployed to Google Cloud on App Engine
if os.getenv('GAE_APPLICATION', None):
    # Running on production App Engine, so connect to Google Cloud SQL using
    # the unix socket at /cloudsql/<your-cloudsql-connection string>
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'HOST': os.environ.get('GC_HOST'),
            'USER': os.environ.get('GC_USER'),
            'PASSWORD': os.environ.get('GC_PASS'),
            'NAME': os.environ.get('GC_DB_NAME'),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

#STATIC_URL = 'static/'
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATICFILES_DIRS = (os.path.join(BASE_DIR, "sfiles"), )


# MEDIA ROOT is full path on where we would like django to store our media files.
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Google Cloud Media Storage Buckets Setup
#    DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
#    GS_BUCKET_NAME = os.environ.get('GS_BUCKET_NAME')
#    GS_DEFAULT_ACL = os.environ.get('GS_ACL')
#    MEDIA_URL = os.environ.get('GS_MEDIA URL')
#    GS_LOCATION = os.environ.get('GS_MEDIA')

CRISPY_TEMPLATE_PACK = 'bootstrap4'
LOGIN_REDIRECT_URL = 'blog-home'
LOGIN_URL = 'login'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get('DJANGO_APP_EMAIL_USER')  # Login email address for gmail
EMAIL_HOST_PASSWORD = os.environ.get('DJANGO_APP_EMAIL_PASS')  # Login password for gmail django app

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#STATIC_ROOT = '/static'

TEMPLATE_DIRS = (os.path.join(BASE_DIR, 'templates'),)
TEMPLATE_LOADERS = (
'django.template.loaders.filesystem.Loader',
'django.template.loaders.app_directories.Loader',)


if DEBUG != True:
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_SSL_REDIRECT = False
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    CSRF_TRUSTED_ORIGINS = ["https://bdcompanytest.ignorelist.com"]         #Required when serving POST requests from a reverse proxy server such as Nginx


#STRIPE PAYMENT SETTINGS:
if DEBUG == True:
    STRIPE_PUBLIC_KEY = os.environ.get('STRIPE_PUBLIC_KEY_PRODUCTION')
    STRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY_PRODUCTION')
else:
    STRIPE_PUBLIC_KEY = os.environ.get('STRIPE_PUBLIC_KEY')
    STRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY')
#STRIPE_WEBHOOK_SECRET = os.environ.get('STRIPE_WEBHOOK_SECRET')